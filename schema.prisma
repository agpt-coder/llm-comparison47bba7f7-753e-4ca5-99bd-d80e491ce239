// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         UserRole
  prompts      Prompt[]
  responses    Response[]
  APIKey       APIKey[]
  Log          Log[]
  Subscription Subscription[]

  @@map("users")
}

model Prompt {
  id        String   @id @default(uuid())
  prompt    String
  createdAt DateTime @default(now())
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String

  responses Response[]

  @@map("prompts")
}

model Response {
  id             String   @id @default(uuid())
  claudeResponse String
  gpt4Response   String
  createdAt      DateTime @default(now())
  promptId       String
  prompt         Prompt   @relation(fields: [promptId], references: [id])
  responseBy     User     @relation(fields: [userId], references: [id])
  userId         String

  @@map("responses")
}

model APIKey {
  id        String   @id @default(uuid())
  key       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("api_keys")
}

model Log {
  id          String   @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])

  @@map("logs")
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  startDate DateTime @default(now())
  endDate   DateTime
  isActive  Boolean  @default(true)

  @@map("subscriptions")
}

enum UserRole {
  FreeUser
  SubscribedUser
  Admin
}

